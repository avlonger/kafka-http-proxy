[Global]
	# Directive tells the server to accept incoming requests on
	# the specified address-and-port combination.
	Address = 0.0.0.0:8080

	# Enables debug mode.
	Verbose = false

	# Specifies logfile location.
	Logfile = /var/log/kafka-http-proxy.log

	# Specifies pidfile location.
	Pidfile = /run/kafka-http-proxy.pid

	# Maximum allowed number of connections. When this limit is exceeded,
	# the server will return the 503 (Service Temporarily Unavailable) error
	# in reply to a request.
	MaxConns = 1000000

	# Variable limits the number of operating system threads that can
	# execute user-level Go code simultaneously. Set to 0 to use a value
	# equal to the number of logical CPUs on the local machine.
	GoMaxProcs = 0

[Kafka]
	# This Directive specifies the address and port of kafka broker. You can
	# use this directive more than once to specify more brokers.
	Broker = localhost:9092

### Metadata is the namespace for metadata management properties used by
### the Client.
[Metadata]
	# Parameter specifies how long to cache the metadata.
	# Set to 0 to disable.
	CacheTimeout = 3s

[Broker]
	# Parameter describes the size of connection pool.
	NumConns = 100

	# How long to wait for the initial connection to succeed before timing
	# out and returning an error
	DialTimeout = 500ms

	# Limits the number of connection attempts to a single
	# node before failing. Use LeaderRetryWait to control the wait time
	# between retries.
	LeaderRetryLimit = 2

	# Sets a limit to the waiting time when trying to connect
	# to a single node after failure.
	# (Timeout on a connection is controlled by the DialTimeout setting)
	LeaderRetryWait = 500ms

### Producer is the namespace for configuration related to producing messages,
### used by the Producer.
[Producer]
	# Timeout of single produce request.
	RequestTimeout = 5s

	# Specify how many times message producing should be retried in
	# case of failure, before returning the error to the caller.
	RetryLimit = 2

	# RetryWait specify wait duration before produce retry after failure.
	RetryWait = 200ms

### Consumer is the namespace for configuration related to consuming
### messages, used by the Consumer.
[Consumer]
	# The minimum number of message bytes to fetch in a request - the broker
	# will wait until at least this many are available. The default is 1, as
	# 0 causes the consumer to spin when no messages are available.
	MinFetchSize = 1

	# The maximum number of message bytes to fetch from the broker in a
	# single request. Messages larger than this will return
	# ErrMessageTooLarge and will not be consumable, so you must be sure
	# this is at least as large as your largest message.
	MaxFetchSize = 4194304

	# The default number of message bytes to fetch from the broker in each
	# request.
	DefaultFetchSize = 524288
	foo =1

	# Controlls fetch request timeout.This operation is blocking the whole connection,
	# so it should always be set to small value.
	# To control fetch function timeout use RetryLimit and RetryWait.
	RequestTimeout = 50ms

	# Limits fetching messages a given amount of times before
	# returning ErrNoData error.
	# Set to -1 to turn this limit off.
	RetryLimit = 2

	# Controls the duration of wait between fetch request calls,
	# when no data was returned.
	RetryWait = 50ms

	# Limits the number of retry attempts when an error is encountered.
	RetryErrLimit = 2

	# Controls the wait duration between retries after failed fetch request.
	RetryErrWait = 50ms
