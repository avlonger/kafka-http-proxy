[Global]
Address = :8080
Logfile = /var/log/kafka-http-proxy.log
Verbose = false

[Kafka]
Broker = localhost:9092

### Net is the namespace for network-level properties used by the Broker, and
### shared by the Client/Producer/Consumer.
[Net]
	# How many outstanding requests a connection is allowed to have before
	# sending on it blocks
	MaxOpenRequests = 5

	## All three of the below configurations are similar to the
	## `socket.timeout.ms` setting in JVM kafka.

	# How long to wait for the initial connection to succeed before timing
	# out and returning an error
	DialTimeout = 30s

	# How long to wait for a response before timing out and returning an
	# error
	ReadTimeout = 30s

	# How long to wait for a transmit to succeed before timing out and
	# returning an error
	WriteTimeout = 30s

### Metadata is the namespace for metadata management properties used by
### the Client, and shared by the Producer/Consumer.
[Metadata]
	# The total number of times to retry a metadata request when the cluster is in
	# the middle of a leader election.
	RetryMax = 3

	# How long to wait for leader election to occur before retrying. Similar to the
	# JVM's `retry.backoff.ms`.
	RetryBackoff = 250ms

	# How frequently to refresh the cluster metadata in the background. Set to 0 to
	# disable. Similar to `topic.metadata.refresh.interval.ms` in the JVM version.
	RefreshFrequency = 2m

### Producer is the namespace for configuration related to producing messages,
### used by the Producer.
[Producer]
	## The following config options control how often messages are batched up and
	## sent to the broker. By default, messages are sent as fast as possible, and
	## all messages received while the current batch is in-flight are placed
	## into the subsequent batch.

	# The best-effort number of bytes needed to trigger a flush. Use the
	# global sarama.MaxRequestSize to set a hard upper limit.
	#FlushBytes = 0

	# The best-effort number of messages needed to trigger a flush. Use
	# `MaxMessages` to set a hard upper limit.
	#FlushMessages = 1

	# The best-effort frequency of flushes. Equivalent to
	# `queue.buffering.max.ms` setting of JVM producer.
	FlushFrequency = 100ms

	# The maximum number of messages the producer will send in a single
	# broker request. Defaults to 0 for unlimited. Similar to
	# `queue.buffering.max.messages` in the JVM producer.
	FlushMaxMessages = 1

### Consumer is the namespace for configuration related to consuming
### messages, used by the Consumer.
[Consumer]
	# How long to wait after a failing to read from a partition before trying again.
	RetryBackoff = 2s

	# The minimum number of message bytes to fetch in a request - the broker
	# will wait until at least this many are available. The default is 1, as
	# 0 causes the consumer to spin when no messages are available.
	# Equivalent to the JVM's `fetch.min.bytes`.
	FetchMin = 1

	# The default number of message bytes to fetch from the broker in each
	# request (default 32768). This should be larger than the majority of
	# your messages, or else the consumer will spend a lot of time
	# negotiating sizes and not actually consuming. Similar to the JVM's
	# `fetch.message.max.bytes`.
	FetchDefault = 32768

	# The maximum number of message bytes to fetch from the broker in a
	# single request. Messages larger than this will return
	# ErrMessageTooLarge and will not be consumable, so you must be sure
	# this is at least as large as your largest message. Defaults to 0 (no
	# limit). Similar to the JVM's `fetch.message.max.bytes`.
	FetchMax = 0

	# The maximum amount of time the broker will wait for Consumer.Fetch.Min
	# bytes to become available before it returns fewer than that anyways.
	# The default is 250ms, since 0 causes the consumer to spin when no
	# events are available. 100-500ms is a reasonable range for most cases.
	# Kafka only supports precision up to milliseconds; nanoseconds will be
	# truncated. Equivalent to the JVM's `fetch.wait.max.ms`.
	MaxWaitTime = 250ms

